/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon May 13 14:19:28 GMT 2019
 */

package com.yoha.server.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class FileUploadConfig_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.yoha.server.config.FileUploadConfig"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "/home/lch/StudioProjects/main-project-repository-yoha/server"); 
    java.lang.System.setProperty("user.home", "/home/lch"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "lch"); 
    java.lang.System.setProperty("user.timezone", "Asia/Shanghai"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FileUploadConfig_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult",
      "org.springframework.web.context.ServletContextAware",
      "org.apache.commons.fileupload.servlet.ServletFileUpload",
      "org.springframework.web.multipart.MultipartHttpServletRequest",
      "org.apache.commons.fileupload.RequestContext",
      "org.springframework.http.CacheControl",
      "org.apache.commons.fileupload.FileUpload",
      "org.springframework.util.MimeType",
      "org.springframework.web.multipart.MultipartRequest",
      "org.springframework.web.multipart.commons.CommonsFileUploadSupport",
      "org.apache.commons.fileupload.FileUploadBase",
      "org.springframework.core.NestedExceptionUtils",
      "org.springframework.core.io.Resource",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.http.HttpHeaders",
      "org.springframework.http.MediaType",
      "org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException",
      "org.apache.commons.fileupload.util.FileItemHeadersImpl",
      "org.springframework.web.multipart.MaxUploadSizeExceededException",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.context.annotation.Configuration",
      "org.apache.commons.fileupload.disk.DiskFileItemFactory",
      "org.apache.commons.fileupload.FileItemIterator",
      "org.springframework.core.io.InputStreamSource",
      "org.springframework.web.multipart.MultipartResolver",
      "org.apache.commons.io.FileCleaningTracker",
      "org.apache.commons.fileupload.FileUploadBase$FileSizeLimitExceededException",
      "org.springframework.web.multipart.MultipartException",
      "org.apache.commons.io.FileDeleteStrategy",
      "org.springframework.beans.factory.Aware",
      "org.apache.commons.fileupload.FileUploadBase$SizeException",
      "org.springframework.web.multipart.commons.CommonsMultipartResolver",
      "org.apache.commons.fileupload.ProgressListener",
      "org.springframework.http.ReadOnlyHttpHeaders",
      "org.apache.commons.fileupload.FileUploadBase$FileUploadIOException",
      "org.apache.commons.fileupload.FileItemStream",
      "org.springframework.http.ContentDisposition",
      "org.springframework.stereotype.Indexed",
      "org.apache.commons.fileupload.FileItem",
      "org.springframework.http.HttpMethod",
      "org.springframework.util.MultiValueMap",
      "org.apache.commons.fileupload.FileItemFactory",
      "org.apache.commons.fileupload.FileItemHeaders",
      "org.springframework.stereotype.Component",
      "com.yoha.server.config.FileUploadConfig",
      "org.apache.commons.io.FileCleaningTracker$Reaper",
      "org.apache.commons.fileupload.FileItemHeadersSupport",
      "org.apache.commons.fileupload.FileUploadBase$IOFileUploadException",
      "org.springframework.web.multipart.commons.CommonsMultipartFile",
      "org.springframework.web.multipart.MultipartFile",
      "org.apache.commons.fileupload.FileUploadException",
      "org.springframework.util.LinkedMultiValueMap",
      "org.springframework.util.Assert"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FileUploadConfig_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.yoha.server.config.FileUploadConfig",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.springframework.web.multipart.commons.CommonsFileUploadSupport",
      "org.springframework.web.multipart.commons.CommonsMultipartResolver",
      "org.apache.commons.fileupload.disk.DiskFileItemFactory",
      "org.apache.commons.fileupload.FileUploadBase",
      "org.apache.commons.fileupload.FileUpload",
      "org.apache.commons.fileupload.servlet.ServletFileUpload"
    );
  }
}
