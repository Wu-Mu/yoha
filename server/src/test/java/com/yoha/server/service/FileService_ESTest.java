/*
 * This file was automatically generated by EvoSuite
 * Mon May 13 14:11:55 GMT 2019
 */

package com.yoha.server.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.yoha.server.mapper.FileMapper;
import com.yoha.server.service.FileService;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileService_ESTest extends FileService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileService fileService0 = new FileService((FileMapper) null);
      // Undeclared exception!
      try { 
        fileService0.upload((MultipartFile) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.auth0.jwt.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      // Undeclared exception!
      try { 
        fileService0.upload((MultipartFile) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The token was expected to have 3 parts, but got 1.
         //
         verifyException("com.auth0.jwt.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      // Undeclared exception!
      try { 
        fileService0.getUserFiles((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.auth0.jwt.TokenUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./images/HBG+Mz");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      httpServletResponseWrapper0.setResponse(httpServletResponseWrapper0);
      // Undeclared exception!
      try { 
        fileService0.download("HBG+Mz", httpServletResponseWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./images/HBG+Mz");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      JSONObject jSONObject0 = fileService0.download("HBG+Mz", httpServletResponseWrapper0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("./images/HBG+Mz");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      // Undeclared exception!
      try { 
        fileService0.download("HBG+Mz", httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileMapper fileMapper0 = mock(FileMapper.class, new ViolatedAssumptionAnswer());
      FileService fileService0 = new FileService(fileMapper0);
      // Undeclared exception!
      try { 
        fileService0.getUserFiles("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The token was expected to have 3 parts, but got 1.
         //
         verifyException("com.auth0.jwt.TokenUtils", e);
      }
  }
}
